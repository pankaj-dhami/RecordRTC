<!--
> Muaz Khan     - https://github.com/muaz-khan
> MIT License   - https://www.webrtc-experiment.com/licence/
> Documentation - https://github.com/streamproc/MediaStreamRecorder
> =================================================================
> audio-recorder.html
-->
<!DOCTYPE html>
<html lang="en">
<head>
    <title>MultiStreamRecorder.js & MediaStreamRecorder</title>

    <!--
    <script
        src="../MediaStreamRecorder-v1.2.js"
        data-scripts-dir="/MediaStreamRecorder/"
        data-require="StereoRecorder,MediaRecorder,WhammyRecorder,GifRecorder,MultiStreamRecorder"
    ></script>
    -->
    <!--
    <script src="../MediaStreamRecorder-standalone.js"></script>
    -->

    <script src="https://cdn.webrtc-experiment.com/MediaStreamRecorder.js"></script>

    <style>
        input {
            border: 1px solid rgb(46, 189, 235);
            border-radius: 3px;
            font-size: 1em;
            outline: none;
            padding: .2em .4em;
            width: 60px;
            text-align: center;
        }
    </style>
</head>
<body>
    <h1>
        MultiStreamRecorder.js & <a href="https://github.com/streamproc/MediaStreamRecorder">MediaStreamRecorder</a>
    </h1>

    <p>
        Getting both audio/video blobs in single "ondataavailable" event using <a href="https://github.com/streamproc/MediaStreamRecorder">MediaStreamRecorder</a>
    </p>

    <div>
        <label for="time-interval">Time Interval (milliseconds):</label>
        <input type="text" id="time-interval" value="5000">ms

        <button id="start-recording">Start Recording</button>
        <button id="stop-recording" disabled>Stop Recording</button>
    </div>

    <div id="container"></div>

    <script>
        // commonly allowed resolutions:
        // ['1920:1080',
        // '1280:720',
        // '960:720',
        // '640:360',
        // '640:480',
        // '320:240',
        // '320:180']
        var resolution_x = 1280;
        var resolution_y = 720;

        var mediaConstraints = {
            audio: true,
            video: {
                mandatory: {
                    maxWidth: resolution_x,
                    maxHeight: resolution_y,
                    //minFrameRate: 3,
                    //maxFrameRate: 64,
                    //minAspectRatio: 1.77
                }
            }
        };

        document.querySelector('#start-recording').onclick = function () {
            this.disabled = true;
            navigator.getUserMedia(mediaConstraints, onMediaSuccess, onMediaError);
        };

        document.querySelector('#stop-recording').onclick = function () {
            this.disabled = true;
            multiStreamRecorder.stop();

            if (multiStreamRecorder.stream) {
                multiStreamRecorder.stream.stop();
            }
        };

        var multiStreamRecorder;

        var audioVideoBlobs = {};
        var recordingInterval = 0;
        var index = 1;
        function onMediaSuccess(stream) {
            var video = document.createElement('video');

            video = mergeProps(video, {
                controls: true,
                src: URL.createObjectURL(stream)
            });

            //video.width = resolution_x;
            //video.height = resolution_y;

            video.addEventListener('loadedmetadata', function () {
                multiStreamRecorder = new MultiStreamRecorder(stream);

                // below line is optional
                // because we already set "video.width"
                // and "video.height"....5 lines above
                multiStreamRecorder.canvas = {
                    width: video.width,
                    height: video.height
                };

                multiStreamRecorder.video = video;
                multiStreamRecorder.video.mimeType = 'video/mp4';

                multiStreamRecorder.ondataavailable = function (blobs) {
                    appendLink(blobs.audio);
                    appendLink(blobs.video);
                    var fileName = index;
                    PostBlob(blobs.video, 'video', fileName + '.mp4')
                    PostBlob(blobs.audio, 'audio', fileName + '.wav');


                };
                function xhr(url, data, callback) {
                    var request = new XMLHttpRequest();
                    request.onreadystatechange = function () {
                        if (request.readyState == 4 && request.status == 200) {
                            callback(request.responseText);
                        }
                    };

                    if (url.indexOf('/home/DeleteFile') == -1) {
                        request.upload.onloadstart = function () {
                           // percentage.innerHTML = 'Upload started...';
                        };

                        request.upload.onprogress = function (event) {
                          //  progress.max = event.total;
                          //  progress.value = event.loaded;
                          //  percentage.innerHTML = 'Upload Progress ' + Math.round(event.loaded / event.total * 100) + "%";
                        };

                        request.upload.onload = function () {
                         //   percentage.innerHTML = 'Saved!';
                        };
                    }

                    request.open('POST', url);
                    request.send(data);
                }
                function PostBlob(blob, fileType, fileName) {
                    // FormData
                    var formData = new FormData();
                    formData.append(fileType + '-filename', fileName);
                    formData.append(fileType + '-blob', blob);

                    // progress-bar
                    //var hr = document.createElement('hr');
                    //container.appendChild(hr);
                    //var strong = document.createElement('strong');
                    //strong.id = 'percentage';
                    //strong.innerHTML = fileType + ' upload progress: ';
                    //container.appendChild(strong);
                    //var progress = document.createElement('progress');
                    //container.appendChild(progress);

                    // POST the Blob using XHR2
                    xhr('/Home/PostRecordedAudioVideo', formData, function (fName) {
        
                        index++;
                        //container.appendChild(document.createElement('hr'));
                        //var mediaElement = document.createElement(fileType);

                        //var source = document.createElement('source');
                        //source.src = location.href + 'uploads/' + fName.replace(/"/g, '');

                        //if (fileType == 'video') source.type = 'video/webm; codecs="vp8, vorbis"';
                        //if (fileType == 'audio') source.type = !!navigator.mozGetUserMedia ? 'audio/ogg' : 'audio/wav';

                        //mediaElement.appendChild(source);

                        //mediaElement.controls = true;
                        //container.appendChild(mediaElement);
                        //mediaElement.play();

                        //progress.parentNode.removeChild(progress);
                        //strong.parentNode.removeChild(strong);
                        //hr.parentNode.removeChild(hr);
                    });
                }
                function appendLink(blob) {
                    var a = document.createElement('a');
                    a.target = '_blank';
                    a.innerHTML = 'Open Recorded ' + (blob.type == 'audio/ogg' ? 'Audio' : 'Video') + ' No. ' + (index++) + ' (Size: ' + bytesToSize(blob.size) + ') Time Length: ' + getTimeLength(timeInterval);

                    a.href = URL.createObjectURL(blob);

                    container.appendChild(a);
                    container.appendChild(document.createElement('hr'));
                }

                var timeInterval = document.querySelector('#time-interval').value;
                if (timeInterval) timeInterval = parseInt(timeInterval);
                else timeInterval = 5 * 1000;

                // get blob after specific time interval
                multiStreamRecorder.start(timeInterval);

                document.querySelector('#stop-recording').disabled = false;
            }, false);

            video.play();

            container.appendChild(video);
            container.appendChild(document.createElement('hr'));
        }

        function onMediaError(e) {
            console.error('media error', e);
        }

        var container = document.getElementById('container');
        var index = 1;

        // below function via: http://goo.gl/B3ae8c
        function bytesToSize(bytes) {
            var k = 1000;
            var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
            if (bytes === 0) return '0 Bytes';
            var i = parseInt(Math.floor(Math.log(bytes) / Math.log(k)), 10);
            return (bytes / Math.pow(k, i)).toPrecision(3) + ' ' + sizes[i];
        }

        // below function via: http://goo.gl/6QNDcI
        function getTimeLength(milliseconds) {
            var data = new Date(milliseconds);
            return data.getUTCHours() + " hours, " + data.getUTCMinutes() + " minutes and " + data.getUTCSeconds() + " second(s)";
        }

        window.onbeforeunload = function () {
            document.querySelector('#start-recording').disabled = false;
        };
    </script>
    <button id="mergevideo">Merge and display video</button>

</body>
<script>
    $(function () {
        $('#mergevideo').click(function () {

            $.ajax({
                method: "GET",
                url: "MergeALL",
                async:true,
                success: function (data) {
                    container.appendChild(document.createElement('hr'));
                    var mediaElement = document.createElement("video");

                    var source = document.createElement('source');
                    source.src = location.protocol+"//"+location.host + data;
                    source.type = 'video/mp4';
                    mediaElement.appendChild(source);

                    mediaElement.controls = true;
                    container.appendChild(mediaElement);
                    mediaElement.play();
                   
                }
            });
        });

    });
</script>
</html>